@page "/apitest"
@using System.Collections.ObjectModel
@using Exman.Models
@using Exman.Services
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IApiRequestService ApiRequestService
@inject ICollectionService CollectionService
@inject IEnvironmentService EnvironmentService
@inject IRequestHistoryService RequestHistoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="postman-container">
    <!-- Left sidebar for collections -->
    <div class="sidebar">
        <div class="collections-header">
            <div class="button-group">
                <button class="new-button" @onclick="OpenNewCollectionModal">New</button>
                <button class="import-button" @onclick="ShowImportDialog">Import</button>
            </div>
        </div>

        <!-- Collection browser -->
        <div class="collections-container">
            <CollectionTree 
            Collections="Collections" 
            OnSelectRequest="HandleSelectRequest"
            OnAddRequest="HandleAddRequest"
            OnEditCollection="HandleEditCollection"
            OnDeleteCollection="@(tuple => OpenDeleteCollectionModal(tuple.Id, tuple.Name))"
            OnCreateCollection="OpenNewCollectionModal"
            OnDeleteRequest="HandleDeleteRequest" />
        </div>
    </div>

    <!-- Sidebar resizer -->
    <div class="sidebar-resizer" @onmousedown="OnResizerMouseDown"></div>

    <!-- Main content area -->
    <div class="main-content">
        <!-- Request tabs -->
        <div class="request-tabs-container">
            @if (OpenTabs.Count > 0)
            {
                <div class="request-tabs-header">
                    @for (int i = 0; i < OpenTabs.Count; i++)
                    {
                        int tabIndex = i;
                        string tabName = !string.IsNullOrEmpty(OpenTabs[i].Name) ? OpenTabs[i].Name : $"{OpenTabs[i].Method} {OpenTabs[i].Url}";
                        <div class="request-tab @(ActiveTabIndex == tabIndex ? "active" : "")" @onclick="() => SwitchToTab(tabIndex)">
                            <span class="tab-name">@(tabName.Length > 20 ? tabName.Substring(0, 17) + "..." : tabName)</span>
                            <button class="tab-close" @onclick:stopPropagation="true" @onclick="() => CloseTab(tabIndex)">×</button>
                        </div>
                    }

                    @if (ActiveTabIndex == -1)
                    {
                        <div class="request-tab active">
                            <span class="tab-name">New Request</span>
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Request URL bar -->
        <div class="url-bar">
            <div class="method-container">
                <select class="method-select" @bind="CurrentRequest.Method">
                    @foreach (var method in Enum.GetValues(typeof(ApiHttpMethod)))
                    {
                        <option value="@method">@method</option>
                    }
                </select>
            </div>
            <VariableInputComponent @bind-Value="CurrentRequest.Url" Placeholder="Enter request URL" CssClass="url-input" />
            <div class="environment-container">
                <select class="environment-select" @bind="CurrentEnvironmentId" @bind:after="EnvironmentChanged">
                    <option value="">Local Development</option>
                    @foreach (var env in Environments)
                    {
                        <option value="@env.Id">@env.Name</option>
                    }
                </select>
            </div>
            <div class="actions-container">
                <button class="send-button" @onclick="SendRequest">Send</button>
                <button class="save-button" @onclick="SaveRequest">Save</button>
                <button class="save-as-button" @onclick="OpenSaveAsRequestModal">Save As</button>
            </div>
        </div>

        <!-- Request tabs -->
        <div class="request-tabs">
            <div class="tabs">
                <button class='tab-button @(ActiveTab == "params" ? "active" : "")' @onclick='() => ActiveTab = "params"'>Params</button>
                <button class='tab-button @(ActiveTab == "auth" ? "active" : "")' @onclick='() => ActiveTab = "auth"'>Authorization</button>
                <button class='tab-button @(ActiveTab == "headers" ? "active" : "")' @onclick='() => ActiveTab = "headers"'>Headers (@(CurrentRequest.Headers.Count))</button>
                <button class='tab-button @(ActiveTab == "body" ? "active" : "")' @onclick='() => ActiveTab = "body"'>Body</button>
                <button class='tab-button @(ActiveTab == "settings" ? "active" : "")' @onclick='() => ActiveTab = "settings"'>Settings</button>
            </div>

            <!-- Tab content -->
            <div class="tab-content">
                @if (ActiveTab == "params")
                {
                    <div class="params-tab">
                        <h4>Query Params</h4>
                        <table>
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Key</th>
                                    <th>Value</th>
                                    <th>Description</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var param in CurrentRequest.QueryParameters)
                                {
                                    <tr>
                                        <td><input type="checkbox" checked /></td>
                                        <td><input type="text" @bind="param.Key" /></td>
                                        <td><input type="text" @bind="param.Value" /></td>
                                        <td><input type="text" placeholder="Description" /></td>
                                        <td><button class="remove-button" @onclick="() => RemoveParam(param)">×</button></td>
                                    </tr>
                                }
                                <tr>
                                    <td colspan="5">
                                        <button class="add-button" @onclick="AddParam">Add Parameter</button>
                                        <button class="bulk-edit-button">Bulk Edit</button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                }
                else if (ActiveTab == "auth")
                {
                    <div class="auth-tab">
                        <select @bind="CurrentRequest.Authentication.Type">
                            <option value="@Authentication.AuthType.None">No Auth</option>
                            <option value="@Authentication.AuthType.Basic">Basic Auth</option>
                            <option value="@Authentication.AuthType.Bearer">Bearer Token</option>
                        </select>

                        @if (CurrentRequest.Authentication.Type == Authentication.AuthType.Basic)
                        {
                            <div class="auth-form">
                                <div class="form-group">
                                    <label>Username</label>
                                    <input type="text" @bind="CurrentRequest.Authentication.Username" />
                                </div>
                                <div class="form-group">
                                    <label>Password</label>
                                    <input type="password" @bind="CurrentRequest.Authentication.Password" />
                                </div>
                            </div>
                        }
                        else if (CurrentRequest.Authentication.Type == Authentication.AuthType.Bearer)
                        {
                            <div class="auth-form">
                                <div class="form-group">
                                    <label>Token</label>
                                    <input type="text" @bind="CurrentRequest.Authentication.Token" />
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (ActiveTab == "headers")
                {
                    <div class="headers-tab">
                        <table>
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Key</th>
                                    <th>Value</th>
                                    <th>Description</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var header in CurrentRequest.Headers)
                                {
                                    <tr>
                                        <td><input type="checkbox" checked /></td>
                                        <td><input type="text" @bind="header.Key" /></td>
                                        <td><input type="text" @bind="header.Value" /></td>
                                        <td><input type="text" placeholder="Description" /></td>
                                        <td><button class="remove-button" @onclick="() => RemoveHeader(header)">×</button></td>
                                    </tr>
                                }
                                <tr>
                                    <td colspan="5">
                                        <button class="add-button" @onclick="AddHeader">Add Header</button>
                                        <button class="bulk-edit-button">Bulk Edit</button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                }
                else if (ActiveTab == "body")
                {
                    <div class="body-tab">
                        <div class="body-type-selector">
                            <div class="body-type-radio-group">
                                <div class="body-type-radio-option">
                                    <input type="radio" id="body-type-none" name="body-type" value="none" 
                                    checked='@(CurrentRequest.Body.ContentType == "none")' 
                                    @onchange='() => ChangeBodyType("none")' />
                                    <label for="body-type-none">none</label>
                                </div>
                                <div class="body-type-radio-option">
                                    <input type="radio" id="body-type-form-data" name="body-type" value="multipart/form-data" 
                                    checked="@(CurrentRequest.Body.ContentType == "multipart/form-data")" 
                                    @onchange='() => ChangeBodyType("multipart/form-data")' />
                                    <label for="body-type-form-data">form-data</label>
                                </div>
                                <div class="body-type-radio-option">
                                    <input type="radio" id="body-type-urlencoded" name="body-type" value="application/x-www-form-urlencoded" 
                                    checked='@(CurrentRequest.Body.ContentType == "application/x-www-form-urlencoded")' 
                                    @onchange='() => ChangeBodyType("application/x-www-form-urlencoded")' />
                                    <label for="body-type-urlencoded">x-www-form-urlencoded</label>
                                </div>
                                <div class="body-type-radio-option">
                                    <input type="radio" id="body-type-raw" name="body-type" value="text/plain" 
                                    checked='@(CurrentRequest.Body.ContentType == "text/plain" || CurrentRequest.Body.ContentType == "application/json" || CurrentRequest.Body.ContentType == "application/javascript" || CurrentRequest.Body.ContentType == "application/xml" || CurrentRequest.Body.ContentType == "text/html")' 
                                    @onchange='() => ChangeBodyType("text/plain")' />
                                    <label for="body-type-raw">raw</label>
                                </div>
                                <div class="body-type-radio-option">
                                    <input type="radio" id="body-type-binary" name="body-type" value="application/octet-stream" 
                                    checked='@(CurrentRequest.Body.ContentType == "application/octet-stream")' 
                                    @onchange='() => ChangeBodyType("application/octet-stream")' />
                                    <label for="body-type-binary">binary</label>
                                </div>
                                <div class="body-type-radio-option">
                                    <input type="radio" id="body-type-graphql" name="body-type" value="application/graphql" 
                                    checked='@(CurrentRequest.Body.ContentType == "application/graphql")' 
                                    @onchange='() => ChangeBodyType("application/graphql")' />
                                    <label for="body-type-graphql">GraphQL</label>
                                </div>
                            </div>

                            @if (CurrentRequest.Body.ContentType == "text/plain" || 
                                CurrentRequest.Body.ContentType == "application/json" ||
                                CurrentRequest.Body.ContentType == "application/javascript" ||
                                CurrentRequest.Body.ContentType == "application/xml" ||
                                CurrentRequest.Body.ContentType == "text/html")
                            {
                                <div class="raw-type-selector">
                                    <select value="@rawContentType" @onchange="OnRawContentTypeChanged">
                                        <option value="text/plain">Text</option>
                                        <option value="application/json">JSON</option>
                                        <option value="application/javascript">JavaScript</option>
                                        <option value="application/xml">XML</option>
                                        <option value="text/html">HTML</option>
                                    </select>
                                </div>
                                <div style="margin-left: auto;">
                                    <button class="prettify-button" @onclick="PrettifyJson" title="Beautify JSON" 
                                            disabled="@(CurrentRequest.Body.ContentType != "application/json")">
                                        Beautify
                                    </button>
                                </div>
                            }
                        </div>

                        @if (CurrentRequest.Body.ContentType == "application/x-www-form-urlencoded")
                        {
                            <table>
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Key</th>
                                        <th>Value</th>
                                        <th>Description</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var field in CurrentRequest.Body.UrlEncodedData)
                                    {
                                        <tr>
                                            <td><input type="checkbox" checked /></td>
                                            <td><input type="text" @bind="field.Key" /></td>
                                            <td><input type="text" @bind="field.Value" /></td>
                                            <td><input type="text" placeholder="Description" /></td>
                                            <td><button class="remove-button" @onclick="() => RemoveUrlEncodedField(field)">×</button></td>
                                        </tr>
                                    }
                                    <tr>
                                        <td colspan="5">
                                            <button class="add-button" @onclick="AddUrlEncodedField">Add Field</button>
                                            <button class="bulk-edit-button">Bulk Edit</button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        }
                        else if (CurrentRequest.Body.ContentType == "text/plain" || 
                                CurrentRequest.Body.ContentType == "application/json" ||
                                CurrentRequest.Body.ContentType == "application/graphql" ||
                                CurrentRequest.Body.ContentType == "application/javascript" ||
                                CurrentRequest.Body.ContentType == "application/xml" ||
                                CurrentRequest.Body.ContentType == "text/html")
                        {
                            <VariableInputComponent 
                                @bind-Value="CurrentRequest.Body.RawContent" 
                                IsMultiline="true" 
                                Rows="20" 
                                CssClass="body-editor"
                                SyntaxMode="@CurrentRequest.Body.ContentType"
                                @key="CurrentRequest.Body.ContentType" />
                        }
                    </div>
                }
                else if (ActiveTab == "settings")
                {
                    <div class="settings-tab">
                        <div class="settings-group">
                            <h4>Proxy Settings</h4>
                            <label>
                                <input type="checkbox" @bind="CurrentRequest.Proxy.Enabled" />
                                Enable Proxy
                            </label>

                            @if (CurrentRequest.Proxy.Enabled)
                            {
                                <div class="proxy-settings">
                                    <div class="form-group">
                                        <label>Host</label>
                                        <input type="text" @bind="CurrentRequest.Proxy.Host" />
                                    </div>
                                    <div class="form-group">
                                        <label>Port</label>
                                        <input type="number" @bind="CurrentRequest.Proxy.Port" />
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="settings-group">
                            <h4>Cookies</h4>
                            <label>
                                <input type="checkbox" />
                                Enable cookie handling
                            </label>
                        </div>

                        <div class="settings-group">
                            <h4>Environment Variables</h4>
                            @if (CurrentEnvironmentVariables.Any())
                            {
                                <table class="env-vars-table">
                                    <thead>
                                        <tr>
                                            <th>Key</th>
                                            <th>Value</th>
                                            <th>Type</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var variable in CurrentEnvironmentVariables)
                                        {
                                            <tr>
                                                <td>@variable.Key</td>
                                                <td>@variable.Value</td>
                                                <td>@variable.Type</td>
                                            </tr>
                                        }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <p>No environment variables available.</p>
                                }
                            }
                        </div>
                    </div>
                    }
                </div>

                <!-- Response section -->
                <div class="response-section">
                    @if (IsLoading)
                    {
                        <div class="loading">Sending request...</div>
                    }
                    else if (CurrentResponse != null)
                    {
                        <div class="response-header">
                            <div class="status-container">
                                <span class="status-code @GetStatusClass((int)CurrentResponse.StatusCode)">
                                    @((int)CurrentResponse.StatusCode) @CurrentResponse.StatusDescription
                                </span>
                                <span class="response-time">@CurrentResponse.ResponseTime.TotalMilliseconds ms</span>
                                <span class="response-size">@(CurrentResponse.Body?.Length ?? 0) B</span>
                            </div>
                        </div>

                        <div class="response-tabs">
                            <button class='tab-button @(ActiveResponseTab == "body" ? "active" : "")' @onclick='() => ActiveResponseTab = "body"'>Body</button>
                            <button class='tab-button @(ActiveResponseTab == "headers" ? "active" : "")' @onclick='() => ActiveResponseTab = "headers"'>Headers</button>
                            <button class='tab-button @(ActiveResponseTab == "cookies" ? "active" : "")' @onclick='() => ActiveResponseTab = "cookies"'>Cookies</button>
                            <button class='tab-button @(ActiveResponseTab == "test-results" ? "active" : "")' @onclick='() => ActiveResponseTab = "test-results"'>Test Results</button>
                        </div>

                        <div class="response-content">
                            @if (ActiveResponseTab == "body")
                            {
                                <div class="response-body-header">
                                    <div class="content-type">@GetContentType(CurrentResponse)</div>
                                    <div class="response-actions">
                                        <button class="prettify-button" @onclick="PrettifyResponseJson" title="Prettify JSON">{ }</button>
                                        <button class="copy-button" @onclick="CopyResponseToClipboard" title="Copy to clipboard">📋</button>
                                    </div>
                                </div>
                                <div class="response-body-container">
                                    <pre class="response-body">@FormattedResponseBody</pre>       <pre class="response-body">@FormattedResponseBody</pre>
                                </div>
                            }
                            else if (ActiveResponseTab == "headers")rs")
                            {
                                <table class="response-headers">="response-headers">
                                    <thead>
                                        <tr>
                                            <th>Key</th>th>Key</th>
                                            <th>Value</th><th>Value</th>
                                        </tr>r>
                                    </thead>
                                    <tbody>y>
                                        @foreach (var header in CurrentResponse.Headers) (var header in CurrentResponse.Headers)
                                        {
                                            <tr>
                                                <td>@header.Key</td>td>@header.Key</td>
                                                <td>@header.Value</td>       <td>@header.Value</td>
                                            </tr></tr>
                                        }}
                                    </tbody>       </tbody>
                                </table>
                            }
                            else if (ActiveResponseTab == "cookies") "cookies")
                            {
                                <div class="cookies-tab">lass="cookies-tab">
                                    <p>No cookies found in response</p>       <p>No cookies found in response</p>
                                </div>
                            }
                            else if (ActiveResponseTab == "test-results")t-results")
                            {
                                <div class="test-results-tab">lass="test-results-tab">
                                    <p>No tests were run</p>       <p>No tests were run</p>
                                </div>  </div>
                            }       }
                        </div></div>
                    }
                    else
                    {
                        <div class="no-response">
                            <div class="center-message">
                                <i class="icon-no-response"></i> class="icon-no-response"></i>
                                <p>Send a request to see the response</p>  <p>Send a request to see the response</p>
                            </div>       </div>
                        </div>  </div>
                    }  }
                </div>  </div>
            </div>            </div>
        </div>

        @if (showSaveModal)
        {
            <div class="modal-backdrop" @onclick="CloseSaveModal"></div>nclick="CloseSaveModal"></div>
            <div class="modal">
                <div class="modal-header">
                    <h3>Save Request</h3>3>Save Request</h3>
                    <button class="close-button" @onclick="CloseSaveModal">×</button>-button" @onclick="CloseSaveModal">×</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Request Name</label>abel>Request Name</label>
                        <input type="text" @bind="newRequestName" placeholder="Enter a name for this request" />bind="newRequestName" placeholder="Enter a name for this request" />
                    </div>
                    <div class="form-group">
                        <label>Collection</label>
                        <select @onchange="OnCollectionSelected" value="@selectedCollectionId">ue="@selectedCollectionId">
                            <option value="">Select a collection</option>option value="">Select a collection</option>
                            @foreach (var collection in Collections)
                            {
                                <option value="@collection.Id">@collection.Name</option>option value="@collection.Id">@collection.Name</option>
                            }  }
                        </select>  </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="cancel-button" @onclick="CloseSaveModal">Cancel</button>utton class="cancel-button" @onclick="CloseSaveModal">Cancel</button>
                    <button class="save-button" @onclick="SaveToCollection">Save</button>  <button class="save-button" @onclick="SaveToCollection">Save</button>
                </div>       </div>
            </div>            </div>
        }

        @if (showSaveAsModal)
        {
            <div class="modal-backdrop" @onclick="CloseSaveAsModal"></div>nclick="CloseSaveAsModal"></div>
            <div class="modal">
                <div class="modal-header">
                    <h3>Save Request As</h3>3>Save Request As</h3>
                    <button class="close-button" @onclick="CloseSaveAsModal">×</button>-button" @onclick="CloseSaveAsModal">×</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Request Name</label>abel>Request Name</label>
                        <input type="text" @bind="newRequestName" placeholder="Enter a name for this request" />bind="newRequestName" placeholder="Enter a name for this request" />
                    </div>
                    <div class="form-group">
                        <label>Collection</label>
                        <select value="selectedCollectionId" @onchange="OnCollectionSelected">ge="OnCollectionSelected">
                            <option value="">Select a collection</option>option value="">Select a collection</option>
                            @foreach (var collection in Collections)
                            {
                                <option value="@collection.Id">@collection.Name</option>option value="@collection.Id">@collection.Name</option>
                            }  }
                        </select>
                    </div>
                    <div class="collection-tree-container">class="collection-tree-container">
                        @if (!string.IsNullOrEmpty(selectedCollectionId) && currentCollection != null)edCollectionId) && currentCollection != null)
                        {
                            <div class="collection-path">
                                <span>Current path: </span>
                                <span class="path-item" @onclick="() => NavigateToRoot()">Root</span>span class="path-item" @onclick="() => NavigateToRoot()">Root</span>
                                @foreach (var (folder, index) in navigationPath.Select((folder, index) => (folder, index)))r, index) in navigationPath.Select((folder, index) => (folder, index)))
                                {
                                    <span> > </span>   <span> > </span>
                                    <span class="path-item" @onclick="() => NavigateToPathIndex(index)">@folder.Name</span>  <span class="path-item" @onclick="() => NavigateToPathIndex(index)">@folder.Name</span>
                                }
                            </div>/div>
                            @if (currentFolders.Any())
                            {
                                <div class="folder-list">class="folder-list">
                                    @foreach (var folder in currentFolders)
                                    {
                                        <div class="folder-item" @onclick="() => NavigateToFolder(folder)">ToFolder(folder)">
                                            <span class="folder-icon">📁</span>pan class="folder-icon">📁</span>
                                            <span class="folder-name">@folder.Name</span>       <span class="folder-name">@folder.Name</span>
                                        </div>  </div>
                                    }       }
                                </div>       </div>
                            }  }
                        }  }
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="cancel-button" @onclick="CloseSaveAsModal">Cancel</button>
                    <button class="save-button" @onclick="SaveAsToCollection" utton class="save-button" @onclick="SaveAsToCollection" 
                    disabled="@(string.IsNullOrEmpty(selectedCollectionId) || Collections.Count == 0)">Save</button>  disabled="@(string.IsNullOrEmpty(selectedCollectionId) || Collections.Count == 0)">Save</button>
                </div>       </div>
            </div>            </div>
        }

        @if (showCollectionModal)
        {
            <div class="modal-backdrop" @onclick="CloseCollectionModal"></div>nclick="CloseCollectionModal"></div>
            <div class="modal">
                <div class="modal-header">
                    <h3>@(editingCollection.Id == null ? "Create New Collection" : "Edit Collection")</h3>3>@(editingCollection.Id == null ? "Create New Collection" : "Edit Collection")</h3>
                    <button class="close-button" @onclick="CloseCollectionModal">×</button>-button" @onclick="CloseCollectionModal">×</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Collection Name</label>abel>Collection Name</label>
                        <input type="text" @bind="editingCollection.Name" placeholder="Enter a name for this collection" />bind="editingCollection.Name" placeholder="Enter a name for this collection" />
                    </div>
                    <div class="form-group">
                        <label>Description</label>abel>Description</label>
                        <textarea @bind="editingCollection.Description" placeholder="Enter a description (optional)" rows="3"></textarea>  <textarea @bind="editingCollection.Description" placeholder="Enter a description (optional)" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="cancel-button" @onclick="CloseCollectionModal">Cancel</button>utton class="cancel-button" @onclick="CloseCollectionModal">Cancel</button>
                    <button class="save-button" @onclick="SaveCollection">Save</button>  <button class="save-button" @onclick="SaveCollection">Save</button>
                </div>       </div>
            </div>            </div>
        }

        @if (showDeleteCollectionModal)
        {
            <div class="modal-backdrop" @onclick="CloseDeleteCollectionModal"></div>nclick="CloseDeleteCollectionModal"></div>
            <div class="modal">
                <div class="modal-header">
                    <h3>Delete Collection</h3>3>Delete Collection</h3>
                    <button class="close-button" @onclick="CloseDeleteCollectionModal">×</button>-button" @onclick="CloseDeleteCollectionModal">×</button>
                </div>
                <div class="modal-body">lass="modal-body">
                    <p>Are you sure you want to delete the collection "<strong>@collectionToDeleteName</strong>"?</p>nt to delete the collection "<strong>@collectionToDeleteName</strong>"?</p>
                </div>
                <div class="modal-footer">
                    <button class="cancel-button" @onclick="CloseDeleteCollectionModal">Cancel</button>utton class="cancel-button" @onclick="CloseDeleteCollectionModal">Cancel</button>
                    <button class="delete-button" @onclick="DeleteCollection">Delete</button>  <button class="delete-button" @onclick="DeleteCollection">Delete</button>
                </div>       </div>
            </div>            </div>
        }

        @if (showImportDialog)
        {
            <div class="modal-backdrop" @onclick="CloseImportDialog"></div>nclick="CloseImportDialog"></div>
            <div class="modal">
                <div class="modal-header">
                    <h3>Import Collection</h3>3>Import Collection</h3>
                    <button class="close-button" @onclick="CloseImportDialog">×</button>-button" @onclick="CloseImportDialog">×</button>
                </div>
                <div class="modal-body">
                    <div class="import-tabs">
                        <div class="tabs">
                            <button class='tab-button @(importTab == "file" ? "active" : "")' @onclick='() => importTab = "file"'>From File</button>utton class='tab-button @(importTab == "file" ? "active" : "")' @onclick='() => importTab = "file"'>From File</button>
                            <button class='tab-button @(importTab == "raw" ? "active" : "")' @onclick='() => importTab = "raw"'>Raw JSON</button>                            <button class='tab-button @(importTab == "raw" ? "active" : "")' @onclick='() => importTab = "raw"'>Raw JSON</button>
                        </div>

                        <div class="tab-content">class="tab-content">
                            @if (importTab == "file")
                            {
                                <div class="file-import-tab">
                                    <p>Select a Postman Collection JSON file to import:</p> import:</p>
                                    <InputFile OnChange="OnFileChange" class="file-input" accept=".json" />InputFile OnChange="OnFileChange" class="file-input" accept=".json" />
                                    @if (!string.IsNullOrEmpty(importFileName))rtFileName))
                                    {
                                        <div class="file-selected">lass="file-selected">
                                            <span>@importFileName</span>       <span>@importFileName</span>
                                        </div>  </div>
                                    }       }
                                </div>
                            }
                            else if (importTab == "raw")
                            {
                                <div class="raw-import-tab">
                                    <p>Paste your Postman Collection JSON:</p>>Paste your Postman Collection JSON:</p>
                                    <textarea @bind="importJsonText" rows="10" class="json-textarea" placeholder='{ "info": { "name": "Collection Name" }, "item": [] }' />       <textarea @bind="importJsonText" rows="10" class="json-textarea" placeholder='{ "info": { "name": "Collection Name" }, "item": [] }' />
                                </div>  </div>
                            }                            }
                        </div>

                        @if (!string.IsNullOrEmpty(importError))ortError))
                        {
                            <div class="import-error">lass="import-error">
                                <p>@importError</p>       <p>@importError</p>
                            </div>  </div>
                        }  }
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="cancel-button" @onclick="CloseImportDialog">Cancel</button>utton class="cancel-button" @onclick="CloseImportDialog">Cancel</button>
                    <button class="import-button" @onclick="ImportCollection" disabled="@(!CanImport())">Import</button>  <button class="import-button" @onclick="ImportCollection" disabled="@(!CanImport())">Import</button>
                </div>       </div>
            </div>            </div>
        }

        @if (showDeleteRequestModal)
        {
            <div class="modal-backdrop" @onclick="CloseDeleteRequestModal"></div>nclick="CloseDeleteRequestModal"></div>
            <div class="modal">
                <div class="modal-header">
                    <h3>Delete Request</h3>3>Delete Request</h3>
                    <button class="close-button" @onclick="CloseDeleteRequestModal">×</button>-button" @onclick="CloseDeleteRequestModal">×</button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the request "@requestToDeleteName"?</p>>Are you sure you want to delete the request "@requestToDeleteName"?</p>
                    <p>This action cannot be undone.</p>be undone.</p>
                </div>
                <div class="modal-footer">
                    <button class="cancel-button" @onclick="CloseDeleteRequestModal">Cancel</button>utton class="cancel-button" @onclick="CloseDeleteRequestModal">Cancel</button>
                    <button class="delete-button" @onclick="ConfirmDeleteRequest">Delete</button>  <button class="delete-button" @onclick="ConfirmDeleteRequest">Delete</button>
                </div>       </div>
            </div>/div>
        }
        </div>
        <style>
            .response-body-container {            // Store previous raw content to preserve when switching between content types
                max-height: 500px;tent = new Dictionary<string, string>();
                overflow: auto;
                border: 1px solid #e0e0e0;            // Track the raw content type for the dropdown
                padding: 8px;
                background-color: #f8f8f8;
                border-radius: 4px;st { get; set; } = new ApiRequest
            }

            .response-body {
                white-space: pre-wrap;tion<Exman.Models.KeyValuePair>(),
                word-break: break-all;leCollection<Exman.Models.KeyValuePair>(),
                margin: 0;uthentication = new Authentication(),
                font-family: monospace;
            }

            .response-content {  FormData = new ObservableCollection<Exman.Models.KeyValuePair>(),
                flex: 1;servableCollection<Exman.Models.KeyValuePair>()
                display: flex;  },
                flex-direction: column;                Proxy = new ProxySettings()
                overflow: hidden;
            }

            .response-section {            private List<ApiRequest> OpenTabs { get; set; } = new List<ApiRequest>();
                display: flex;-1 means no tab is active (using CurrentRequest)
                flex-direction: column;
                flex: 1;
                min-height: 200px;ams";
                overflow: hidden;;
            }
        </style>
        @code {            private List<RequestEnvironment> Environments { get; set; } = new List<RequestEnvironment>();
            // Store previous raw content to preserve when switching between content types= new List<Variable>();
            private Dictionary<string, string> savedRawContent = new Dictionary<string, string>();
            // Environment cache to store all environment variables in memory
            // Track the raw content type for the dropdown RequestEnvironment>();
            private string rawContentType = "application/json";
            private List<Exman.Models.Collection> Collections { get; set; } = new List<Exman.Models.Collection>();
            private ApiRequest CurrentRequest { get; set; } = new ApiRequestattedResponseBody { get; set; } = "";
            {
                Method = ApiHttpMethod.GET,
                Url = "",
                QueryParameters = new ObservableCollection<Exman.Models.KeyValuePair>(),
                Headers = new ObservableCollection<Exman.Models.KeyValuePair>(),
                Authentication = new Authentication(),dal = false;
                Body = new RequestBodyse;
                {
                    ContentType = "none",
                    FormData = new ObservableCollection<Exman.Models.KeyValuePair>(),ection = new Exman.Models.Collection();
                    UrlEncodedData = new ObservableCollection<Exman.Models.KeyValuePair>();
                },= "";
                Proxy = new ProxySettings()            private string requestToDeleteName = "";
            };eteId = "";

            // Track open request tabs
            private List<ApiRequest> OpenTabs { get; set; } = new List<ApiRequest>();
            private int ActiveTabIndex { get; set; } = -1; // -1 means no tab is active (using CurrentRequest)            private List<Exman.Models.Collection> currentFolders = new List<Exman.Models.Collection>();
ollection> navigationPath = new List<Exman.Models.Collection>();
            private ApiResponse? CurrentResponse { get; set; }
            private string ActiveTab { get; set; } = "params";
            private string ActiveResponseTab { get; set; } = "body"; false;
            private bool IsLoading { get; set; } = false;
            private string CurrentEnvironmentId { get; set; } = "";
            private List<RequestEnvironment> Environments { get; set; } = new List<RequestEnvironment>();";
            private List<Variable> CurrentEnvironmentVariables { get; set; } = new List<Variable>();            private string importError = "";

            // Environment cache to store all environment variables in memory
            private Dictionary<string, RequestEnvironment> EnvironmentCache { get; set; } = new Dictionary<string, RequestEnvironment>();sync Task OnAfterRenderAsync(bool firstRender)

            private List<Exman.Models.Collection> Collections { get; set; } = new List<Exman.Models.Collection>();
            private string FormattedResponseBody { get; set; } = "";
                    // Initialize sidebar resizer
            // Modal propertiesvokeVoidAsync("initializeSidebarResizer");
            private bool showSaveModal = false;
            private bool showSaveAsModal = false;       StateHasChanged();
            private bool showCollectionModal = false;                }
            private bool showDeleteCollectionModal = false;            }
            private bool showDeleteRequestModal = false;
            private string newRequestName = "";
            private string selectedCollectionId = "";
            private Exman.Models.Collection editingCollection = new Exman.Models.Collection();
            private string collectionToDeleteId = "";                Environments = (await EnvironmentService.GetEnvironmentsAsync()).ToList();
            private string collectionToDeleteName = "";tionsAsync()).ToList();
            private string requestToDeleteName = "";
            private string requestToDeleteId = "";ronmentId))

            // Save As modal properties                    await LoadEnvironmentVariables();
            private Exman.Models.Collection? currentCollection;
            private List<Exman.Models.Collection> currentFolders = new List<Exman.Models.Collection>();
            private List<Exman.Models.Collection> navigationPath = new List<Exman.Models.Collection>();                // Check for URL parameters
Uri);
            // Import dialog properties
            private bool showImportDialog = false;ific collection
            private string importTab = "file";ar collectionIdParam = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("collectionId");
            private string? importFileName;
            private string importJsonText = "";
            private string importError = "";specified collection
            private IBrowserFile? importFile;ar collection = Collections.FirstOrDefault(c => c.Id == collectionIdParam);

            protected override async Task OnAfterRenderAsync(bool firstRender)
            {   // No need to explicitly select the collection as the CollectionTree component
                if (firstRender)       // will handle displaying it based on its own selection logic
                {                    }
                    // Initialize sidebar resizer
                    await JSRuntime.InvokeVoidAsync("initializeSidebarResizer");
y)
                    StateHasChanged();ar requestIdParam = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("requestId");
                }aram))
            }
story
ar historyRequest = await RequestHistoryService.GetRequestByIdAsync(requestIdParam);
            protected override async Task OnInitializedAsync()
            {                    {
                Environments = (await EnvironmentService.GetEnvironmentsAsync()).ToList();
                Collections = (await CollectionService.GetCollectionsAsync()).ToList();
/ Set the appropriate tab based on the request data
                if (!string.IsNullOrEmpty(CurrentEnvironmentId)) != null && CurrentRequest.Body.ContentType != "none")
                {
                    await LoadEnvironmentVariables();
                }
aders.Count > 0)
                // Check for URL parameters
                var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);ActiveTab = "headers";

                // Handle collectionId parameter to open specific collection
                var collectionIdParam = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("collectionId");
                if (!string.IsNullOrEmpty(collectionIdParam))       ActiveTab = "params";
                {       }
                    // Find and select the specified collection                    }
                    var collection = Collections.FirstOrDefault(c => c.Id == collectionIdParam);                }
                    if (collection != null)
                    {
                        // No need to explicitly select the collection as the CollectionTree component
                        // will handle displaying it based on its own selection logic
                    } async Task SendRequest()
                }

                // Handle requestId parameter (from history)                {
                var requestIdParam = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("requestId");
                if (!string.IsNullOrEmpty(requestIdParam))
                {ng.IsNullOrEmpty(CurrentEnvironmentId))
                    // Load the request from history
                    var historyRequest = await RequestHistoryService.GetRequestByIdAsync(requestIdParam);
                    if (historyRequest != null)   // Set the current environment in the EnvironmentService
                    {rvice.SetCurrentEnvironmentAsync(CurrentEnvironmentId);
                        CurrentRequest = historyRequest.Clone();

                        // Set the appropriate tab based on the request data
                        if (CurrentRequest.Body != null && CurrentRequest.Body.ContentType != "none")   Console.WriteLine($"Environment error: {envEx.Message}");
                        {       // Continue with the request even if the environment could not be set
                            ActiveTab = "body";                        }
                        }
                        else if (CurrentRequest.Headers.Count > 0)
                        {                    // Send the request using ApiRequestService
                            ActiveTab = "headers"; await ApiRequestService.SendRequestAsync(CurrentRequest);
                        }
                        else                    // Add to history
                        {storyAsync(CurrentRequest.Clone(), CurrentResponse);
                            ActiveTab = "params";
                        }   // Format response body for display
                    }
                }


            }/ Handle network/connection related errors

            private async Task SendRequest()
            {
                try
                {Message}\n\nDetails: {ex.InnerException?.Message ?? "No additional details"}",
                    IsLoading = true;  Headers = new ObservableCollection<Exman.Models.KeyValuePair>(),

                    if (!string.IsNullOrEmpty(CurrentEnvironmentId))                    };
                    {eBody = CurrentResponse.Body;
                        try {
                            // Set the current environment in the EnvironmentService
                            await EnvironmentService.SetCurrentEnvironmentAsync(CurrentEnvironmentId);   Console.WriteLine($"HTTP Request Error: {ex.Message}");
                        }ace: {ex.StackTrace}");
                        catch (Exception envEx)
                        { ex)
                            Console.WriteLine($"Environment error: {envEx.Message}");
                            // Continue with the request even if the environment could not be set/ Handle timeout errors
                        }
                    }

                    // Send the request using ApiRequestService Timeout
                    CurrentResponse = await ApiRequestService.SendRequestAsync(CurrentRequest);.",
  Headers = new ObservableCollection<Exman.Models.KeyValuePair>(),
                    // Add to historyCurrentRequest.Timeout)
                    await RequestHistoryService.AddToHistoryAsync(CurrentRequest.Clone(), CurrentResponse);                    };
eBody = CurrentResponse.Body;
                    // Format response body for display
                    FormatResponseBody();   // Log the error
                }Request Timeout: {ex.Message}");
                catch (HttpRequestException ex)
                {
                    // Handle network/connection related errors
                    CurrentResponse = new ApiResponse/ Handle JSON parsing errors
                    {
                        StatusDescription = "Network Error",
                        StatusCode = (System.Net.HttpStatusCode)0,
                        Body = $"Network error: {ex.Message}\n\nDetails: {ex.InnerException?.Message ?? "No additional details"}",
                        Headers = new ObservableCollection<Exman.Models.KeyValuePair>(), {ex.Message}\n\nLine: {ex.LineNumber}, Position: {ex.BytePositionInLine}",
                        ResponseTime = TimeSpan.Zero  Headers = new ObservableCollection<Exman.Models.KeyValuePair>(),
                    };
                    FormattedResponseBody = CurrentResponse.Body;                    };
eBody = CurrentResponse.Body;
                    // Log the error
                    Console.WriteLine($"HTTP Request Error: {ex.Message}");   // Log the error
                    Console.WriteLine($"Stack Trace: {ex.StackTrace}");e($"JSON Parsing Error: {ex.Message}");
                }
                catch (TaskCanceledException ex)
                {
                    // Handle timeout errors
                    CurrentResponse = new ApiResponsels = ex.InnerException != null 
                    {                        ? $"{ex.Message}\n\nInner Exception: {ex.InnerException.Message}"
                        StatusDescription = "Request Timeout",
                        StatusCode = (System.Net.HttpStatusCode)408, // HTTP 408 Request Timeout
                        Body = $"The request timed out after {CurrentRequest.Timeout} ms.",e
                        Headers = new ObservableCollection<Exman.Models.KeyValuePair>(),
                        ResponseTime = TimeSpan.FromMilliseconds(CurrentRequest.Timeout)
                    };
                    FormattedResponseBody = CurrentResponse.Body; occurred: {errorDetails}",
  Headers = new ObservableCollection<Exman.Models.KeyValuePair>(),
                    // Log the error
                    Console.WriteLine($"Request Timeout: {ex.Message}");                    };
                }
                catch (JsonException ex)
                {
                    // Handle JSON parsing errors   Console.WriteLine($"Unexpected error in SendRequest: {ex.Message}");
                    CurrentResponse = new ApiResponsesole.WriteLine($"Stack Trace: {ex.StackTrace}");
                    {
                        StatusDescription = "JSON Parsing Error",
                        StatusCode = (System.Net.HttpStatusCode)0,
                        Body = $"Error parsing JSON: {ex.Message}\n\nLine: {ex.LineNumber}, Position: {ex.BytePositionInLine}",       IsLoading = false;
                        Headers = new ObservableCollection<Exman.Models.KeyValuePair>(),                }
                        ResponseTime = TimeSpan.Zero
                    };
                    FormattedResponseBody = CurrentResponse.Body;

                    // Log the errord is in a tab), update it in its collection
                    Console.WriteLine($"JSON Parsing Error: {ex.Message}");f (ActiveTabIndex >= 0 && !string.IsNullOrEmpty(CurrentRequest.Id) && 
                }CollectionId))
                catch (Exception ex)
                {
                    // Handle all other unexpected errors
                    string errorDetails = ex.InnerException != null 
                        ? $"{ex.Message}\n\nInner Exception: {ex.InnerException.Message}"e parent folder by searching through the collections
                        : ex.Message;ar collection = Collections.FirstOrDefault(c => c.Id == CurrentRequest.CollectionId);

                    CurrentResponse = new ApiResponse
                    {// Find the request in the collection or its folders to determine the parent folder
                        StatusDescription = "Error",
                        StatusCode = (System.Net.HttpStatusCode)0,
                        Body = $"An unexpected error occurred: {errorDetails}",/ Check if it's in the root of the collection
                        Headers = new ObservableCollection<Exman.Models.KeyValuePair>(),quests.Any(r => r.Id == CurrentRequest.Id))
                        ResponseTime = TimeSpan.Zero
                    };   found = true;
                    FormattedResponseBody = CurrentResponse.Body;    // It's in root, so parentFolderId remains empty

                    // Log the error with stack trace for debugging
                    Console.WriteLine($"Unexpected error in SendRequest: {ex.Message}");/ If not found at the root, search in the folders
                    Console.WriteLine($"Stack Trace: {ex.StackTrace}");
                }
                finally       FindRequestInFolders(collection.Folders, CurrentRequest.Id, ref parentFolderId, ref found);
                {    }
                    IsLoading = false;
                }
            }                    // Update request using SaveRequestToFolderAsync to maintain folder structure
erAsync(CurrentRequest.CollectionId, parentFolderId, CurrentRequest);
            private async Task SaveRequest()
            {                    // Update the tab with the latest changes
                // If this request came from a collection (has an Id and is in a tab), update it in its collectionx] = CurrentRequest.Clone();
                if (ActiveTabIndex >= 0 && !string.IsNullOrEmpty(CurrentRequest.Id) && 
                    !string.IsNullOrEmpty(CurrentRequest.CollectionId))   // Refresh collections
                {Collections = (await CollectionService.GetCollectionsAsync()).ToList();
                    string parentFolderId = string.Empty;
                    
                    // Get the current parent folder ID if available
                    // First try to find the parent folder by searching through the collections   // Request doesn't belong to a collection yet, show the save-as dialog
                    var collection = Collections.FirstOrDefault(c => c.Id == CurrentRequest.CollectionId);       OpenSaveAsRequestModal();
                    if (collection != null)    }
                    {
                        // Find the request in the collection or its folders to determine the parent folder
                        bool found = false;/ Helper method to find a request within nested folders
                        ction> folders, string requestId, ref string parentFolderId, ref bool found)
                        // Check if it's in the root of the collection
                        if (collection.Requests.Any(r => r.Id == CurrentRequest.Id))ound the request
                        {
                            found = true;
                            // It's in root, so parentFolderId remains empty
                        }/ Check if the request is in this folder
                        Id == requestId))
                        // If not found at the root, search in the folders
                        if (!found)olderId = folder.Id;
                        {   found = true;
                            FindRequestInFolders(collection.Folders, CurrentRequest.Id, ref parentFolderId, ref found);    return;
                        }
                    }
                    / If not found, check nested folders
                    // Update request using SaveRequestToFolderAsync to maintain folder structure
                    await CollectionService.SaveRequestToFolderAsync(CurrentRequest.CollectionId, parentFolderId, CurrentRequest);
   FindRequestInFolders(folder.Folders, requestId, ref parentFolderId, ref found);
                    // Update the tab with the latest changes       if (found) return; // If found in a child folder, no need to continue searching
                    OpenTabs[ActiveTabIndex] = CurrentRequest.Clone();       }
                }
                    // Refresh collections
                    Collections = (await CollectionService.GetCollectionsAsync()).ToList();
                }
                else
                {   newRequestName = CurrentRequest.Name ?? $"{CurrentRequest.Method} {CurrentRequest.Url}";
                    // Request doesn't belong to a collection yet, show the save-as dialog                showSaveModal = true;
                    OpenSaveAsRequestModal();
                }
            }SaveModal = false;
            
            // Helper method to find a request within nested folders
            private void FindRequestInFolders(IEnumerable<Collection> folders, string requestId, ref string parentFolderId, ref bool found)
            {electedCollectionId))
                if (found) return; // Already found the request
                   // TODO: Show error message
                foreach (var folder in folders)                    return;
                {
                    // Check if the request is in this folder
                    if (folder.Requests.Any(r => r.Id == requestId))var requestToSave = CurrentRequest.Clone();
                    {
                        parentFolderId = folder.Id;
                        found = true;r id (if any) to save under the correct folder structure
                        return;tring parentFolderId = string.Empty;
                    }
                    
                    // If not found, check nested folders   // Use the last folder in the navigation path as the parent folder
                    if (folder.Folders != null && folder.Folders.Any())                    parentFolderId = navigationPath.Last().Id;
                    {
                        FindRequestInFolders(folder.Folders, requestId, ref parentFolderId, ref found);
                        if (found) return; // If found in a child folder, no need to continue searching                // Save the request to the specified collection and folder
                    }ollectionService.SaveRequestToFolderAsync(selectedCollectionId, parentFolderId, requestToSave);
                }
            }                // Refresh collections
ait CollectionService.GetCollectionsAsync()).ToList();
            private void OpenSaveRequestModal()
            {                CloseSaveModal();
                newRequestName = CurrentRequest.Name ?? $"{CurrentRequest.Method} {CurrentRequest.Url}";
                showSaveModal = true;
            }

            private void CloseSaveModal() => showSaveModal = false;   newRequestName = CurrentRequest.Name ?? $"{CurrentRequest.Method} {CurrentRequest.Url}";
                showSaveAsModal = true;
            private async Task SaveToCollection()
            {
                if (string.IsNullOrWhiteSpace(selectedCollectionId))SaveAsModal = false;
                {
                    // TODO: Show error message
                    return;
                }electedCollectionId))

                var requestToSave = CurrentRequest.Clone();   // TODO: Show error message
                requestToSave.Name = newRequestName;                    return;
                
                // Store the parent folder id (if any) to save under the correct folder structure
                string parentFolderId = string.Empty;                var requestToSave = CurrentRequest.Clone();
                if (navigationPath.Any())
                {
                    // Use the last folder in the navigation path as the parent folderr id (if any) to save under the correct folder structure
                    parentFolderId = navigationPath.Last().Id;tring parentFolderId = string.Empty;
                }

                // Save the request to the specified collection and folder   // Use the last folder in the navigation path as the parent folder
                bool success = await CollectionService.SaveRequestToFolderAsync(selectedCollectionId, parentFolderId, requestToSave);                    parentFolderId = navigationPath.Last().Id;

                // Refresh collections
                Collections = (await CollectionService.GetCollectionsAsync()).ToList();                // Save the request to the specified collection and folder
ollectionService.SaveRequestToFolderAsync(selectedCollectionId, parentFolderId, requestToSave);
                CloseSaveModal();
            }                // Refresh collections
t CollectionService.GetCollectionsAsync()).ToList();
            private void OpenSaveAsRequestModal()
            {                CloseSaveAsModal();
                newRequestName = CurrentRequest.Name ?? $"{CurrentRequest.Method} {CurrentRequest.Url}";
                showSaveAsModal = true;
            }

            private void CloseSaveAsModal() => showSaveAsModal = false;e.Value?.ToString() ?? "";

            private async Task SaveAsToCollection()   navigationPath.Clear();
            {                currentFolders = currentCollection?.Folders?.ToList() ?? new List<Exman.Models.Collection>();
                if (string.IsNullOrWhiteSpace(selectedCollectionId))
                {
                    // TODO: Show error message()
                    return;
                }   navigationPath.Clear();
                currentFolders = currentCollection?.Folders?.ToList() ?? new List<Exman.Models.Collection>();
                var requestToSave = CurrentRequest.Clone();
                requestToSave.Name = newRequestName;

                // Store the parent folder id (if any) to save under the correct folder structure
                string parentFolderId = string.Empty;   navigationPath = navigationPath.Take(index + 1).ToList();
                if (navigationPath.Any())                currentFolders = navigationPath.Last().Folders?.ToList() ?? new List<Exman.Models.Collection>();
                {
                    // Use the last folder in the navigation path as the parent folder
                    parentFolderId = navigationPath.Last().Id;xman.Models.Collection folder)
                }
   navigationPath.Add(folder);
                // Save the request to the specified collection and folder                currentFolders = folder.Folders?.ToList() ?? new List<Exman.Models.Collection>();
                bool success = await CollectionService.SaveRequestToFolderAsync(selectedCollectionId, parentFolderId, requestToSave);

                // Refresh collections
                Collections = (await CollectionService.GetCollectionsAsync()).ToList();

                CloseSaveAsModal();
            }y,  // Use empty string instead of null for new collections
  Name = "",
            private void OnCollectionSelected(ChangeEventArgs e)
            {   };
                selectedCollectionId = e.Value?.ToString() ?? "";                showCollectionModal = true;
                currentCollection = Collections.FirstOrDefault(c => c.Id == selectedCollectionId);
                navigationPath.Clear();
                currentFolders = currentCollection?.Folders?.ToList() ?? new List<Exman.Models.Collection>(); => showCollectionModal = false;
            }

            private void NavigateToRoot()
            {tingCollection.Id))
                navigationPath.Clear();
                currentFolders = currentCollection?.Folders?.ToList() ?? new List<Exman.Models.Collection>();   // Create new collection
            }await CollectionService.CreateCollectionAsync(editingCollection);

            private void NavigateToPathIndex(int index)
            {
                navigationPath = navigationPath.Take(index + 1).ToList();   // Update existing collection
                currentFolders = navigationPath.Last().Folders?.ToList() ?? new List<Exman.Models.Collection>();                    await CollectionService.UpdateCollectionAsync(editingCollection);
            }

            private void NavigateToFolder(Exman.Models.Collection folder)                // Refresh collections
            {llectionService.GetCollectionsAsync()).ToList();
                navigationPath.Add(folder);
                currentFolders = folder.Folders?.ToList() ?? new List<Exman.Models.Collection>();                CloseCollectionModal();
            }

            private void OpenNewCollectionModal()ection collection)
            {
                editingCollection = new Exman.Models.Collection Exman.Models.Collection
                {
                    Id = string.Empty,  // Use empty string instead of null for new collections
                    Name = "",  Name = collection.Name,
                    Description = ""n.Description
                };   };
                showCollectionModal = true;                showCollectionModal = true;
            }

            private void CloseCollectionModal() => showCollectionModal = false;ionModal(string id, string name)

            private async Task SaveCollection()
            {   collectionToDeleteName = name;
                if (string.IsNullOrEmpty(editingCollection.Id))                showDeleteCollectionModal = true;
                {
                    // Create new collection
                    await CollectionService.CreateCollectionAsync(editingCollection);al() => showDeleteCollectionModal = false;
                }
                else
                {
                    // Update existing collection
                    await CollectionService.UpdateCollectionAsync(editingCollection);
                }ool success = await CollectionService.DeleteCollectionAsync(collectionToDeleteId);

                // Refresh collections
                Collections = (await CollectionService.GetCollectionsAsync()).ToList();   // Refresh collections
Collections = (await CollectionService.GetCollectionsAsync()).ToList();
                CloseCollectionModal();
            }

            private void HandleEditCollection(Exman.Models.Collection collection)       // Handle error - could add a toast notification here
            {                    }
                editingCollection = new Exman.Models.Collection
                {
                    Id = collection.Id,                CloseDeleteCollectionModal();
                    Name = collection.Name,
                    Description = collection.Description
                };equest, string CollectionId) data)
                showCollectionModal = true;
            }                // Check if the request is already open in a tab
nTabs.FindIndex(tab => tab.Id == data.Request.Id);
            private void OpenDeleteCollectionModal(string id, string name)
            {
                collectionToDeleteId = id;
                collectionToDeleteName = name;   // Request is already open, make the tab active
                showDeleteCollectionModal = true;SwitchToTab(existingTabIndex);
            }

            private void CloseDeleteCollectionModal() => showDeleteCollectionModal = false;

            private async Task DeleteCollection()                    var requestClone = data.Request.Clone();
            {
                if (!string.IsNullOrEmpty(collectionToDeleteId))
                {/ Ensure the body type is properly set based on content type
                    bool success = await CollectionService.DeleteCollectionAsync(collectionToDeleteId);
                    if (success)
                    {dy.ContentType switch
                        // Refresh collections
                        Collections = (await CollectionService.GetCollectionsAsync()).ToList();
                    }ication/xml" or "text/html" => RequestBody.BodyType.Raw,
                    else,
                    {e.UrlEncoded,
                        // Handle error - could add a toast notification here
                    }  "application/octet-stream" => RequestBody.BodyType.Binary,
                }       _ => RequestBody.BodyType.Raw // Default to Raw for other content types
    };
                CloseDeleteCollectionModal();
            }
   OpenTabs.Add(requestClone);
            private async Task HandleSelectRequest((ApiRequest Request, string CollectionId) data)       SwitchToTab(OpenTabs.Count - 1);
            {    }
                // Check if the request is already open in a tab
                int existingTabIndex = OpenTabs.FindIndex(tab => tab.Id == data.Request.Id);

                if (existingTabIndex >= 0)
                {ex < OpenTabs.Count)
                    // Request is already open, make the tab active
                    SwitchToTab(existingTabIndex);// Set active tab index
                }
                else
                {// Update current request to reflect the selected tab
                    // Open request in a new tab[tabIndex];
                    var requestClone = data.Request.Clone();
                    requestClone.CollectionId = data.CollectionId;
CurrentResponse = null;
                    // Ensure the body type is properly set based on content type
                    if (requestClone.Body != null)
                    {/ Set the appropriate tab based on the request data
                        requestClone.Body.Type = requestClone.Body.ContentType switch != null && CurrentRequest.Body.ContentType != "none")
                        {
                            "none" => RequestBody.BodyType.None,
                            "text/plain" or "application/json" or "application/javascript" or "application/xml" or "text/html" => RequestBody.BodyType.Raw,
                            "multipart/form-data" => RequestBody.BodyType.FormData,aders.Count > 0)
                            "application/x-www-form-urlencoded" => RequestBody.BodyType.UrlEncoded,
                            "application/graphql" => RequestBody.BodyType.GraphQL,ActiveTab = "headers";
                            "application/octet-stream" => RequestBody.BodyType.Binary,
                            _ => RequestBody.BodyType.Raw // Default to Raw for other content types
                        };
                    }       ActiveTab = "params";
                           }
                    OpenTabs.Add(requestClone);    }
                    SwitchToTab(OpenTabs.Count - 1);
                }
            }
            
            private void SwitchToTab(int tabIndex)tabIndex < OpenTabs.Count)
            {
                if (tabIndex >= 0 && tabIndex < OpenTabs.Count)// Remove the tab
                {
                    // Set active tab index
                    ActiveTabIndex = tabIndex;/ Adjust the active tab index
                    
                    // Update current request to reflect the selected tab
                    CurrentRequest = OpenTabs[tabIndex];ed request
                    ctiveTabIndex = -1;
                    // Reset current response
                    CurrentResponse = null;
                    FormattedResponseBody = "";
                    
                    // Set the appropriate tab based on the request datation<Exman.Models.KeyValuePair>(),
                    if (CurrentRequest.Body != null && CurrentRequest.Body.ContentType != "none")leCollection<Exman.Models.KeyValuePair>(),
                    {uthentication = new Authentication(),
                        ActiveTab = "body";
                    }
                    else if (CurrentRequest.Headers.Count > 0)
                    {  FormData = new ObservableCollection<Exman.Models.KeyValuePair>(),
                        ActiveTab = "headers";servableCollection<Exman.Models.KeyValuePair>()
                    }  },
                    else       Proxy = new ProxySettings()
                    {
                        ActiveTab = "params";
                    }
                }
            }ore or is the active tab, adjust the active tab index
               ActiveTabIndex = Math.Max(0, ActiveTabIndex - 1);
            private void CloseTab(int tabIndex)    SwitchToTab(ActiveTabIndex);
            {
                if (tabIndex >= 0 && tabIndex < OpenTabs.Count)
                {
                    // Remove the tab   CurrentResponse = null;
                    OpenTabs.RemoveAt(tabIndex);       FormattedResponseBody = "";
                        }
                    // Adjust the active tab index
                    if (OpenTabs.Count == 0)
                    {lectionId)
                        // No tabs left, reset to unsaved request
                        ActiveTabIndex = -1;   selectedCollectionId = collectionId;
                        CurrentRequest = new ApiRequest    OpenSaveRequestModal();
                        {
                            Method = ApiHttpMethod.GET,
                            Url = "",()
                            QueryParameters = new ObservableCollection<Exman.Models.KeyValuePair>(),
                            Headers = new ObservableCollection<Exman.Models.KeyValuePair>(),    await LoadEnvironmentVariables();
                            Authentication = new Authentication(),
                            Body = new RequestBody
                            {
                                ContentType = "none",
                                FormData = new ObservableCollection<Exman.Models.KeyValuePair>(),
                                UrlEncodedData = new ObservableCollection<Exman.Models.KeyValuePair>()
                            },   CurrentEnvironmentVariables = new List<Variable>();
                            Proxy = new ProxySettings()    return;
                        };
                    }
                    else if (ActiveTabIndex >= tabIndex)vironment))
                    {
                        // If the removed tab is before or is the active tab, adjust the active tab index   CurrentEnvironmentVariables = cachedEnvironment.Variables.ToList();
                        ActiveTabIndex = Math.Max(0, ActiveTabIndex - 1);    return;
                        SwitchToTab(ActiveTabIndex);
                    }
                    ar environment = await EnvironmentService.GetEnvironmentAsync(CurrentEnvironmentId);
                    // Reset current response
                    CurrentResponse = null;
                    FormattedResponseBody = "";   CurrentEnvironmentVariables = environment.Variables.ToList();
                }EnvironmentCache[CurrentEnvironmentId] = environment;
            }
            
            private void HandleAddRequest(string collectionId)
            {       CurrentEnvironmentVariables = new List<Variable>();
                selectedCollectionId = collectionId;    }
                OpenSaveRequestModal();
            }
            
            private async Task EnvironmentChanged()
            {    CurrentRequest.QueryParameters.Add(new Exman.Models.KeyValuePair());
                await LoadEnvironmentVariables();
            }
            r param)
            private async Task LoadEnvironmentVariables()
            {    CurrentRequest.QueryParameters.Remove(param);
                if (string.IsNullOrEmpty(CurrentEnvironmentId))
                {
                    CurrentEnvironmentVariables = new List<Variable>();
                    return;
                }    CurrentRequest.Headers.Add(new Exman.Models.KeyValuePair());
                
                if (EnvironmentCache.TryGetValue(CurrentEnvironmentId, out var cachedEnvironment))
                {ValuePair header)
                    CurrentEnvironmentVariables = cachedEnvironment.Variables.ToList();
                    return;    CurrentRequest.Headers.Remove(header);
                }
                
                var environment = await EnvironmentService.GetEnvironmentAsync(CurrentEnvironmentId);
                if (environment != null)
                {    CurrentRequest.Body.UrlEncodedData.Add(new Exman.Models.KeyValuePair());
                    CurrentEnvironmentVariables = environment.Variables.ToList();
                    EnvironmentCache[CurrentEnvironmentId] = environment;
                }luePair field)
                else
                {    CurrentRequest.Body.UrlEncodedData.Remove(field);
                    CurrentEnvironmentVariables = new List<Variable>();
                }
            }s(int statusCode)
            
            private void AddParam()
            {
                CurrentRequest.QueryParameters.Add(new Exman.Models.KeyValuePair());
            }rect",
            00 => "client-error",
            private void RemoveParam(Exman.Models.KeyValuePair param)  >= 500 => "server-error",
            {       _ => "unknown"
                CurrentRequest.QueryParameters.Remove(param);    };
            }
            
            private void AddHeader()
            {
                CurrentRequest.Headers.Add(new Exman.Models.KeyValuePair());   var contentTypeHeader = response.Headers.FirstOrDefault(h => h.Key.Equals("Content-Type", StringComparison.OrdinalIgnoreCase));
            }    return contentTypeHeader?.Value ?? "text/plain";
            
            private void RemoveHeader(Exman.Models.KeyValuePair header)
            {
                CurrentRequest.Headers.Remove(header);
            }string.IsNullOrEmpty(CurrentResponse.Body))
            
            private void AddUrlEncodedField()   FormattedResponseBody = "";
            {    return;
                CurrentRequest.Body.UrlEncodedData.Add(new Exman.Models.KeyValuePair());
            }
            var contentType = GetContentType(CurrentResponse);
            private void RemoveUrlEncodedField(Exman.Models.KeyValuePair field)
            {
                CurrentRequest.Body.UrlEncodedData.Remove(field);pplication/json"))
            }
                   PrettifyResponseJson();
            private string GetStatusClass(int statusCode)    }
            {
                return statusCode switch
                {
                    >= 200 and < 300 => "success",
                    >= 300 and < 400 => "redirect",(string.IsNullOrWhiteSpace(CurrentRequest.Body.RawContent) || CurrentRequest.Body.ContentType != "application/json") return;
                    >= 400 and < 500 => "client-error",
                    >= 500 => "server-error",
                    _ => "unknown"
                };   var jsonElement = JsonSerializer.Deserialize<JsonElement>(CurrentRequest.Body.RawContent);
            }urrentRequest.Body.RawContent = JsonSerializer.Serialize(jsonElement, new JsonSerializerOptions { WriteIndented = true });
            
            private string GetContentType(ApiResponse response)
            {
                var contentTypeHeader = response.Headers.FirstOrDefault(h => h.Key.Equals("Content-Type", StringComparison.OrdinalIgnoreCase));       // Not valid JSON, leave as is
                return contentTypeHeader?.Value ?? "text/plain";    }
            }
            
            private void FormatResponseBody()
            {
                if (CurrentResponse == null || string.IsNullOrEmpty(CurrentResponse.Body))(CurrentResponse == null || string.IsNullOrWhiteSpace(CurrentResponse.Body)) return;
                {
                    FormattedResponseBody = "";
                    return;
                }   var jsonElement = JsonSerializer.Deserialize<JsonElement>(CurrentResponse.Body);
                ormattedResponseBody = JsonSerializer.Serialize(jsonElement, new JsonSerializerOptions { WriteIndented = true });
                var contentType = GetContentType(CurrentResponse);
                FormattedResponseBody = CurrentResponse.Body;
                
                if (contentType.Contains("application/json"))   // Not valid JSON, leave as is
                {       FormattedResponseBody = CurrentResponse.Body;
                    PrettifyResponseJson();    }
                }
            }
            
            private void PrettifyJson()
            {
                if (string.IsNullOrWhiteSpace(CurrentRequest.Body.RawContent) || CurrentRequest.Body.ContentType != "application/json") return;
                   // Use JSRuntime to call JavaScript clipboard API
                try       await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", FormattedResponseBody);
                {                }
                    var jsonElement = JsonSerializer.Deserialize<JsonElement>(CurrentRequest.Body.RawContent);
                    CurrentRequest.Body.RawContent = JsonSerializer.Serialize(jsonElement, new JsonSerializerOptions { WriteIndented = true });
                }
                catch
                {
                    // Not valid JSON, leave as is
                }   CurrentRequest.Body.ContentType == "text/plain" || 
            }tion/json")
            
            private void PrettifyResponseJson()
            {
                if (CurrentResponse == null || string.IsNullOrWhiteSpace(CurrentResponse.Body)) return;none")
                
                try
                {
                    var jsonElement = JsonSerializer.Deserialize<JsonElement>(CurrentResponse.Body);pplication/json" && string.IsNullOrEmpty(CurrentRequest.Body.RawContent))
                    FormattedResponseBody = JsonSerializer.Serialize(jsonElement, new JsonSerializerOptions { WriteIndented = true });
                }   // Add empty JSON object as starting point
                catch       CurrentRequest.Body.RawContent = "{\n  \n}";
                {
                    // Not valid JSON, leave as is
                    FormattedResponseBody = CurrentResponse.Body; == "application/x-www-form-urlencoded")
                }
            };
            
            private async Task CopyResponseToClipboard()/ Add an empty field if none exist
            {rlEncodedData.Count == 0)
                if (!string.IsNullOrEmpty(FormattedResponseBody))
                {       AddUrlEncodedField();
                    // Use JSRuntime to call JavaScript clipboard API       }
                    await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", FormattedResponseBody);                }
                }
            }

            private void UpdateBodyType()
            {
                // Clear data when content type changes
                if (CurrentRequest.Body.ContentType == "none" || 
                    CurrentRequest.Body.ContentType == "text/plain" || " ||
                    CurrentRequest.Body.ContentType == "application/json")ascript" ||
                {||
                    CurrentRequest.Body.UrlEncodedData.Clear();    CurrentRequest.Body.ContentType == "text/html") && 
                    
                    if (CurrentRequest.Body.ContentType == "none")
                    {    savedRawContent[CurrentRequest.Body.ContentType] = CurrentRequest.Body.RawContent;
                        CurrentRequest.Body.RawContent = "";
                    }
                    else if (CurrentRequest.Body.ContentType == "application/json" && string.IsNullOrEmpty(CurrentRequest.Body.RawContent))// Set the new content type
                    {
                        // Add empty JSON object as starting point
                        CurrentRequest.Body.RawContent = "{\n  \n}";/ Set the appropriate BodyType enum value based on the content type
                    }witch
                }
                else if (CurrentRequest.Body.ContentType == "application/x-www-form-urlencoded")
                {ication/xml" or "text/html" => RequestBody.BodyType.Raw,
                    CurrentRequest.Body.RawContent = "";,
                    e.UrlEncoded,
                    // Add an empty field if none exist
                    if (CurrentRequest.Body.UrlEncodedData.Count == 0)  "application/octet-stream" => RequestBody.BodyType.Binary,
                    {    _ => RequestBody.BodyType.Raw // Default to Raw for other content types
                        AddUrlEncodedField();
                    }
                }/ Apply changes based on the new content type
            }xt/plain" || contentType == "application/json" || contentType == "application/graphql" || contentType == "application/javascript" || contentType == "application/xml" || contentType == "text/html")

            private void ChangeBodyType(string contentType)// Clear form data
            {
                // If we're switching from a raw type, save the content
                if ((CurrentRequest.Body.ContentType == "text/plain" || / Set raw content type based on dropdown for raw
                     CurrentRequest.Body.ContentType == "application/json" ||
                     CurrentRequest.Body.ContentType == "application/graphql" ||
                     CurrentRequest.Body.ContentType == "application/javascript" ||    CurrentRequest.Body.ContentType = rawContentType;
                     CurrentRequest.Body.ContentType == "application/xml" ||
                     CurrentRequest.Body.ContentType == "text/html") && 
                    !string.IsNullOrEmpty(CurrentRequest.Body.RawContent))/ Restore saved content if exists
                {y.ContentType, out string savedContent))
                    savedRawContent[CurrentRequest.Body.ContentType] = CurrentRequest.Body.RawContent;
                }
                
                // Set the new content typepe == "application/json" && string.IsNullOrEmpty(CurrentRequest.Body.RawContent))
                CurrentRequest.Body.ContentType = contentType;
                   // Initialize empty JSON if needed
                // Set the appropriate BodyType enum value based on the content type       CurrentRequest.Body.RawContent = "{\n  \n}";
                CurrentRequest.Body.Type = contentType switch
                {
                    "none" => RequestBody.BodyType.None,
                    "text/plain" or "application/json" or "application/javascript" or "application/xml" or "text/html" => RequestBody.BodyType.Raw,
                    "multipart/form-data" => RequestBody.BodyType.FormData,// For form data, we keep the raw content in case user switches back
                    "application/x-www-form-urlencoded" => RequestBody.BodyType.UrlEncoded,
                    "application/graphql" => RequestBody.BodyType.GraphQL,
                    "application/octet-stream" => RequestBody.BodyType.Binary,/ Add an empty field if none exist
                    _ => RequestBody.BodyType.Raw // Default to Raw for other content typesrlEncodedData.Count == 0)
                };
                       AddUrlEncodedField();
                // Apply changes based on the new content type
                if (contentType == "text/plain" || contentType == "application/json" || contentType == "application/graphql" || contentType == "application/javascript" || contentType == "application/xml" || contentType == "text/html")
                {
                    // Clear form data
                    CurrentRequest.Body.UrlEncodedData.Clear();    // Don't clear the saved raw content, just hide it
                    
                    // Set raw content type based on dropdown for raw   
                    if (contentType == "text/plain")    StateHasChanged();
                    {
                        CurrentRequest.Body.ContentType = rawContentType;
                    }tTypeChanged(ChangeEventArgs e)
                    
                    // Restore saved content if existse.Value == null)
                    if (savedRawContent.TryGetValue(CurrentRequest.Body.ContentType, out string savedContent))
                    {    
                        CurrentRequest.Body.RawContent = savedContent;;
                    }
                    else if (CurrentRequest.Body.ContentType == "application/json" && string.IsNullOrEmpty(CurrentRequest.Body.RawContent))
                    {
                        // Initialize empty JSON if needed
                        CurrentRequest.Body.RawContent = "{\n  \n}";" ||
                    }ascript" ||
                }||
                else if (contentType == "application/x-www-form-urlencoded")    CurrentRequest.Body.ContentType == "text/html") && 
                {
                    // For form data, we keep the raw content in case user switches back
                    // but don't display it in the UI    savedRawContent[CurrentRequest.Body.ContentType] = CurrentRequest.Body.RawContent;
                    
                    // Add an empty field if none exist
                    if (CurrentRequest.Body.UrlEncodedData.Count == 0)
                    {rawContentType = newRawContentType;
                        AddUrlEncodedField();newRawContentType;
                    }
                }/ Restore saved content if exists
                else if (contentType == "none") out string? savedContent) && savedContent != null)
                {
                    // Don't clear the saved raw content, just hide it
                }
                = "application/json" && string.IsNullOrEmpty(CurrentRequest.Body.RawContent))
                StateHasChanged();
            }   // Initialize empty JSON
            .Body.RawContent = "{\n  \n}";
            private void OnRawContentTypeChanged(ChangeEventArgs e)   }
            {                StateHasChanged();
                if (e.Value == null)
                    return;
                    / Import Collection Dialog Methods
                string newRawContentType = e.Value.ToString() ?? "text/plain";g()
                
                // If changing from one raw type to another, save the contente;
                if ((CurrentRequest.Body.ContentType == "text/plain" || ";
                     CurrentRequest.Body.ContentType == "application/json" ||null;
                     CurrentRequest.Body.ContentType == "application/graphql" ||
                     CurrentRequest.Body.ContentType == "application/javascript" ||   importError = "";
                     CurrentRequest.Body.ContentType == "application/xml" ||    StateHasChanged();
                     CurrentRequest.Body.ContentType == "text/html") && 
                    !string.IsNullOrEmpty(CurrentRequest.Body.RawContent))
                {g()
                    savedRawContent[CurrentRequest.Body.ContentType] = CurrentRequest.Body.RawContent;
                }   showImportDialog = false;
                    StateHasChanged();
                // Update the raw content type
                rawContentType = newRawContentType;
                CurrentRequest.Body.ContentType = newRawContentType;eChange(InputFileChangeEventArgs e)
                
                // Restore saved content if existsle;
                if (savedRawContent.TryGetValue(newRawContentType, out string? savedContent) && savedContent != null)importFileName = e.File.Name;
                {
                    CurrentRequest.Body.RawContent = savedContent;
                }/ If file is too large, show error
                else if (newRawContentType == "application/json" && string.IsNullOrEmpty(CurrentRequest.Body.RawContent))
                {
                    // Initialize empty JSONrror = "File is too large. Maximum size is 5MB.";
                    CurrentRequest.Body.RawContent = "{\n  \n}";   importFile = null;
                }       return;
                StateHasChanged();    }
            }

            // Import Collection Dialog Methods
            private void ShowImportDialog()
            {
                showImportDialog = true;
                importJsonText = "";return importFile != null && string.IsNullOrEmpty(importError);
                importFileName = null;
                importFile = null;
                importError = "";
                StateHasChanged();       return !string.IsNullOrWhiteSpace(importJsonText);
            }    }
            
            private void CloseImportDialog()
            { async Task ImportCollection()
                showImportDialog = false;
                StateHasChanged();
            }
            null;
            private async Task OnFileChange(InputFileChangeEventArgs e)
            {mportFile != null)
                importFile = e.File;
                importFileName = e.File.Name;
                importError = "";.OpenReadStream(5 * 1024 * 1024); // 5MB max
                ew MemoryStream();
                // If file is too large, show errorawait stream.CopyToAsync(ms);
                if (importFile.Size > 5 * 1024 * 1024) // 5MB limit
                {
                    importError = "File is too large. Maximum size is 5MB.";using var reader = new StreamReader(ms);
                    importFile = null;er.ReadToEndAsync();
                    return;
                }   // Import the collection
            }omJsonAsync(json);
            
            private bool CanImport() && !string.IsNullOrWhiteSpace(importJsonText))
            {
                if (importTab == "file")   // Import from raw JSON
                {    importedCollection = await CollectionService.ImportPostmanCollectionFromJsonAsync(importJsonText);
                    return importFile != null && string.IsNullOrEmpty(importError);
                }
                elsenull)
                {
                    return !string.IsNullOrWhiteSpace(importJsonText);// Refresh collections
                } CollectionService.GetCollectionsAsync()).ToList();
            }   
            CloseImportDialog();
            private async Task ImportCollection()
            {
                try
                {       importError = "Failed to import collection. Please check if the JSON is valid.";
                    Exman.Models.Collection? importedCollection = null;
                    
                    if (importTab == "file" && importFile != null)
                    {
                        // Read the file content       importError = $"Error importing collection: {ex.Message}";
                        using var stream = importFile.OpenReadStream(5 * 1024 * 1024); // 5MB max                }
                        using var ms = new MemoryStream();
                        await stream.CopyToAsync(ms);
                        ms.Position = 0;
                        
                        using var reader = new StreamReader(ms);   // This method doesn't need to do anything in C# code
                        string json = await reader.ReadToEndAsync();                // The actual resizing logic is handled by JavaScript in sidebar-resizer.js
                        
                        // Import the collection
                        importedCollection = await CollectionService.ImportPostmanCollectionFromJsonAsync(json);ing RequestId, string RequestName) data)
                    }
                    else if (importTab == "raw" && !string.IsNullOrWhiteSpace(importJsonText))est ID for deletion
                    {d;
                        // Import from raw JSONstId;
                        importedCollection = await CollectionService.ImportPostmanCollectionFromJsonAsync(importJsonText);   requestToDeleteName = data.RequestName;
                    }                showDeleteRequestModal = true;
                    
                    if (importedCollection != null)
                    {l()
                        // Refresh collections
                        Collections = (await CollectionService.GetCollectionsAsync()).ToList();                showDeleteRequestModal = false;
                        
                        CloseImportDialog();
                    }
                    else
                    {Empty(requestToDeleteId))
                        importError = "Failed to import collection. Please check if the JSON is valid.";
                    }f the request being deleted is currently open
                }nt tabIndex = OpenTabs.FindIndex(tab => tab.Id == requestToDeleteId);
                catch (Exception ex)
                {
                    importError = $"Error importing collection: {ex.Message}";                        CloseTab(tabIndex);
                }
            }
// Delete the request using the DeleteRequestFromFolderAsync method
            private void OnResizerMouseDown(MouseEventArgs e)e.DeleteRequestFromFolderAsync(selectedCollectionId, requestToDeleteId);
            {
                // This method doesn't need to do anything in C# code   // Refresh collections
                // The actual resizing logic is handled by JavaScript in sidebar-resizer.js                    Collections = (await CollectionService.GetCollectionsAsync()).ToList();
            }

            private void HandleDeleteRequest((string CollectionId, string RequestId, string RequestName) data)   // Close the modal
            {                showDeleteRequestModal = false;
                // Store the collection ID and request ID for deletion
                selectedCollectionId = data.CollectionId;
                requestToDeleteId = data.RequestId;ightingMode(string contentType)
                requestToDeleteName = data.RequestName;
                showDeleteRequestModal = true;
            }
",
            private void CloseDeleteRequestModal() "application/javascript",
            {tion/xml",
                showDeleteRequestModal = false;text/html",
            }  "text/plain" => "text/plain",
       _ => "plaintext"
            private async Task ConfirmDeleteRequest()       };


































        }            }                };                    _ => "plaintext"                    "text/plain" => "text/plain",                    "text/html" => "text/html",                    "application/xml" => "application/xml",                    "application/javascript" => "application/javascript",                    "application/json" => "application/json",                {                return contentType switch            {            private string GetSyntaxHighlightingMode(string contentType)            }                showDeleteRequestModal = false;                // Close the modal                }                    Collections = (await CollectionService.GetCollectionsAsync()).ToList();                    // Refresh collections                                        await CollectionService.DeleteRequestFromFolderAsync(selectedCollectionId, requestToDeleteId);                    // Delete the request using the DeleteRequestFromFolderAsync method                    }                        CloseTab(tabIndex);                    {                    if (tabIndex >= 0)                    int tabIndex = OpenTabs.FindIndex(tab => tab.Id == requestToDeleteId);                    // Close the tab if the request being deleted is currently open                {                if (!string.IsNullOrEmpty(selectedCollectionId) && !string.IsNullOrEmpty(requestToDeleteId))            {            }
        }