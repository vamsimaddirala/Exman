@using Exman.Models
@using Microsoft.AspNetCore.Components.Web

<div class="folder-item folder-item-indented" style="padding-left: @(Indentation * 4)px">
    <div class="folder-header" @onclick="ToggleFolder">
        <span class="expand-icon">@(isExpanded ? "▼" : "▶")</span>
        <span class="folder-name">@GetName()</span>
        <div class="folder-actions">
            <button class="action-btn" title="Add request" @onclick:stopPropagation="true" @onclick="AddRequest">+</button>
        </div>
    </div>
    
    @if (isExpanded)
    {
        <div class="folder-content">
            @if (GetFolders() != null && GetFolders().Any())
            {
                @foreach (var folder in GetFolders())
                {
                    <RenderCollectionFolder IsFolder="true" Folder="folder" OnSelectRequest="OnSelectRequest" OnAddRequest="OnAddRequest" Indentation="Indentation + 1" />
                }
            }
            
            @if (GetRequests() != null && GetRequests().Any())
            {
                @foreach (var request in GetRequests())
                {
                    <div class="request-item request-item-indented" style="padding-left: @(Indentation * 4 + 4)px" @onclick="() => SelectRequest(request)">
                        <div class="request-method @request.Method.ToString().ToLower()">@request.Method</div>
                        <div class="request-name">@(string.IsNullOrEmpty(request.Name) ? request.Url : request.Name)</div>
                    </div>
                }
            }
            else if (GetFolders() == null || !GetFolders().Any())
            {
                <div class="empty-requests empty-requests-indented" style="padding-left: @(Indentation * 4 + 4)px">
                    <p>No requests in this folder.</p>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public Collection? Collection { get; set; }
    
    [Parameter]
    public Collection.Folder? Folder { get; set; }
    
    [Parameter]
    public bool IsFolder { get; set; } = false;
    
    [Parameter]
    public EventCallback<(ApiRequest Request, string CollectionId)> OnSelectRequest { get; set; }
    
    [Parameter]
    public EventCallback<string> OnAddRequest { get; set; }
    
    [Parameter]
    public int Indentation { get; set; } = 0;
    
    private bool isExpanded = false;
    
    private void ToggleFolder()
    {
        isExpanded = !isExpanded;
    }
    
    private async Task SelectRequest(ApiRequest request)
    {
        await OnSelectRequest.InvokeAsync((request, IsFolder ? Folder?.ParentId ?? string.Empty : Collection?.Id ?? string.Empty));
    }
    
    private async Task AddRequest()
    {
        await OnAddRequest.InvokeAsync(IsFolder ? Folder?.Id ?? string.Empty : Collection?.Id ?? string.Empty);
    }
    
    private string GetName()
    {
        return IsFolder ? Folder?.Name ?? string.Empty : Collection?.Name ?? string.Empty;
    }
    
    private IEnumerable<Collection.Folder> GetFolders()
    {
        return IsFolder 
            ? Folder?.Folders?.ToList() ?? new List<Collection.Folder>() 
            : Collection?.Folders?.ToList() ?? new List<Collection.Folder>();
    }
    
    private IEnumerable<ApiRequest> GetRequests()
    {
        return IsFolder 
        ? Folder?.Requests?.ToList()  ?? new List<ApiRequest>() 
        : Collection?.Requests?.ToList()  ?? new List<ApiRequest>();
    }
}