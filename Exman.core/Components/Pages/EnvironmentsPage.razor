@page "/environments"
@using System.Collections.ObjectModel
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using Exman.Models
@using Exman.Services
@inject IEnvironmentService EnvironmentService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="postman-container">
    <!-- Left sidebar for environments list -->
    <div class="sidebar">
        <div class="collections-header">
            <div class="button-group">
                <button class="new-button" @onclick="CreateNewEnvironment">New</button>
                <button class="import-button" @onclick="OpenFileSelector">Import</button>
                <InputFile id="fileInput" OnChange="ImportEnvironmentFile" class="hidden-input" accept=".json" />
            </div>
        </div>
        
        <div class="collections-container">
            @if (!environments.Any())
            {
                <div class="empty-state">
                    <p>No environments found.</p>
                    <button class="create-collection-btn" @onclick="CreateNewEnvironment">Create Environment</button>
                </div>
            }
            else
            {
                <div class="environment-list">
                    @foreach (var env in environments)
                    {
                        <div class="collection-item">
                            <div class="collection-header @(selectedEnvironment?.Id == env.Id ? "selected" : "")" 
                                 @onclick="() => SelectEnvironment(env)">
                                <span class="collection-name">@env.Name</span>
                                <div class="collection-actions">
                                    @if (env.IsActive)
                                    {
                                        <span class="active-badge">Active</span>
                                    }
                                    <button class="action-btn" @onclick="() => selectedEnvironment = env">✎</button>
                                    <button class="action-btn" @onclick="() => { selectedEnvironment = env; showDeleteConfirmation = true; }">×</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                <div class="environment-selector">
                    <label>Active Environment:</label>
                    <select class="environment-select" @onchange="async (e) => { activeEnvironmentId = e.Value.ToString(); await SetActiveEnvironment(); }">
                        <option value="">No Environment</option>
                        @foreach (var env in environments)
                        {
                            <option value="@env.Id" selected="@(activeEnvironmentId == env.Id)">@env.Name</option>
                        }
                    </select>
                </div>
            }
        </div>
    </div>
    
    <!-- Sidebar resizer -->
    <div class="sidebar-resizer" @onmousedown="OnResizerMouseDown"></div>

    <!-- Main content area -->
    <div class="main-content">
        @if (selectedEnvironment != null)
        {
            <!-- Environment header -->
            <div class="url-bar">
                <div>
                    <input type="text" @bind="selectedEnvironment.Name" class="url-input" placeholder="Environment Name" />
                </div>
                <div class="actions-container">
                    @if (selectedEnvironment.IsActive)
                    {
                        <span class="status-code success">Active</span>
                    }
                    <button class="save-button" @onclick="SaveEnvironment">Save</button>
                </div>
            </div>

            <!-- Variables section -->
            <div class="request-tabs">
                <div class="tabs">
                    <button class="tab-button active">Variables</button>
                </div>
                
                <div class="tab-content">
                    <div class="variable-list">
                        <table class="env-vars-table">
                            <thead>
                                <tr>
                                    <th class="col-name">Name</th>
                                    <th class="col-value">Value</th>
                                    <th class="col-secret">Secret</th>
                                    <th class="col-actions">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var variable in selectedEnvironment.Variables)
                                {
                                    <tr>
                                        <td>
                                            <input type="text" @bind="variable.Key" placeholder="Variable name" />
                                        </td>
                                        <td>
                                            @if (variable.IsSecret && !showSecrets)
                                            {
                                                <input type="password" @bind="variable.Value" placeholder="Variable value" />
                                            }
                                            else
                                            {
                                                <input type="text" @bind="variable.Value" placeholder="Variable value" />
                                            }
                                        </td>
                                        <td class="text-center">
                                            <input type="checkbox" @bind="variable.IsSecret" />
                                        </td>
                                        <td class="text-center">
                                            <button class="remove-button" @onclick="() => RemoveVariable(variable)">×</button>
                                        </td>
                                    </tr>
                                }
                                <tr>
                                    <td colspan="4">
                                        <button class="add-button" @onclick="AddVariable">Add Variable</button>
                                        <button class="bulk-edit-button" @onclick="() => showSecrets = !showSecrets">
                                            @(showSecrets ? "Hide" : "Show") Secrets
                                        </button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="response-section">
                <div class="variable-help">
                    <div class="help-alert">
                        <h4>Using Environment Variables</h4>
                        <p>
                            Use variables in your requests by surrounding them with double curly braces: <code>{{variableName}}</code>
                        </p>
                        <p>
                            Example: <code>https://api.example.com/users/{{userId}}</code>
                        </p>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="no-response">
                <div class="center-message">
                    <i class="icon-no-response"></i>
                    <p>Select an environment or create a new one.</p>
                </div>
            </div>
        }
    </div>
</div>

@if (showDeleteConfirmation && selectedEnvironment != null)
{
    <div class="modal-backdrop" @onclick="() => showDeleteConfirmation = false"></div>
    <div class="modal">
        <div class="modal-header">
            <h3>Delete Environment</h3>
            <button class="close-button" @onclick="() => showDeleteConfirmation = false">×</button>
        </div>
        <div class="modal-body">
            <p>Are you sure you want to delete the environment "@selectedEnvironment.Name"?</p>
            <p>This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
            <button class="cancel-button" @onclick="() => showDeleteConfirmation = false">Cancel</button>
            <button class="danger-button" @onclick="DeleteEnvironment">Delete</button>
        </div>
    </div>
}

@if (showToast)
{
    <div class="toast @toastClass show">
        @toastMessage
    </div>
}

<style>
    .environment-list {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
        margin-bottom: 1rem;
    }
    
    .environment-selector {
        padding: 12px 16px;
        border-top: 1px solid #e0e0e0;
        display: flex;
        flex-direction: column;
        gap: 6px;
    }
    
    .active-badge {
        background-color: #28a745;
        color: white;
        padding: 2px 6px;
        border-radius: 10px;
        font-size: 11px;
        margin-right: 5px;
    }
    
    .variable-help {
        padding: 20px;
    }
    
    .help-alert {
        background-color: #f8f9fa;
        border-left: 4px solid #17a2b8;
        padding: 15px;
        border-radius: 4px;
    }
    
    .help-alert h4 {
        color: #17a2b8;
        margin-top: 0;
    }
    
    .help-alert code {
        background-color: #e9ecef;
        padding: 2px 4px;
        border-radius: 3px;
        color: #212529;
    }
    
    .variable-list {
        width: 100%;
    }
    
    .text-center {
        text-align: center;
    }

    /* Toast notification */
    .toast {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #333;
        color: white;
        padding: 15px 25px;
        border-radius: 4px;
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }
    
    .toast.show {
        opacity: 1;
    }
    
    .toast.success {
        background-color: #28a745;
    }
    
    .toast.error {
        background-color: #dc3545;
    }

</style>

@code {
    private List<RequestEnvironment> environments = new();
    private RequestEnvironment? selectedEnvironment;
    private string activeEnvironmentId = string.Empty;
    private bool showDeleteConfirmation = false;
    private bool showSecrets = false;
    
    // Toast notification properties
    private bool showToast = false;
    private string toastMessage = string.Empty;
    private string toastClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadEnvironments();
        
        // Set the active environment ID
        var activeEnv = environments.FirstOrDefault(e => e.IsActive);
        if (activeEnv != null)
        {
            activeEnvironmentId = activeEnv.Id;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           // Initialize sidebar resizer
            await JSRuntime.InvokeVoidAsync("initializeSidebarResizer");
            
            StateHasChanged();
        }
    }

    private async Task LoadEnvironments()
    {
        environments = (await EnvironmentService.GetEnvironmentsAsync()).ToList();
    }
    
    private void SelectEnvironment(RequestEnvironment environment)
    {
        selectedEnvironment = environment;
    }
    
    private async Task SetActiveEnvironment()
    {
        if (string.IsNullOrEmpty(activeEnvironmentId))
        {
            // Todo: Handle deactivation
            return;
        }

        try
        {
            await EnvironmentService.SetActiveEnvironmentAsync(activeEnvironmentId);
            await LoadEnvironments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting active environment: {ex.Message}");
        }
    }
    
    private void CreateNewEnvironment()
    {
        var newEnvironment = new RequestEnvironment
        {
            Name = "New Environment",
            Description = "Description",
            Variables = new ObservableCollection<Variable>()
        };
        
        selectedEnvironment = newEnvironment;
    }
    
    private async Task SaveEnvironment()
    {
        if (selectedEnvironment == null) return;
        
        try
        {
            // Check if this is a new or existing environment
            var existingEnvironment = environments.FirstOrDefault(e => e.Id == selectedEnvironment.Id);
            
            if (existingEnvironment == null)
            {
                // New environment
                await EnvironmentService.CreateEnvironmentAsync(selectedEnvironment);
            }
            else
            {
                // Update existing environment
                await EnvironmentService.UpdateEnvironmentAsync(selectedEnvironment);
            }
            
            await LoadEnvironments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving environment: {ex.Message}");
        }
    }
    
    private async Task DeleteEnvironment()
    {
        if (selectedEnvironment == null) return;
        
        try
        {
            await EnvironmentService.DeleteEnvironmentAsync(selectedEnvironment.Id);
            showDeleteConfirmation = false;
            selectedEnvironment = null;
            await LoadEnvironments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting environment: {ex.Message}");
        }
    }
    
    private void AddVariable()
    {
        if (selectedEnvironment == null) return;
        
        selectedEnvironment.Variables.Add(new Variable
        {
            Key = "",
            Value = "",
            Enabled = true
        });
    }
    
    private void RemoveVariable(Variable variable)
    {
        if (selectedEnvironment == null) return;
        
        selectedEnvironment.Variables.Remove(variable);
    }

    private async Task OpenFileSelector()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('fileInput').click()");
    }

    private async Task ImportEnvironmentFile(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file.Size > 10485760) // 10MB limit
            {
                ShowToast("File is too large. Maximum size is 10MB.", "error");
                return;
            }

            using var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();
            
            try
            {
                // Use the new Postman environment import functionality
                var importedEnvironment = await EnvironmentService.ImportPostmanEnvironmentFromJsonAsync(content);
                
                // Select the newly imported environment
                selectedEnvironment = importedEnvironment;
                
                // Refresh environment list
                await LoadEnvironments();
                
                // Show success message
                ShowToast($"Successfully imported environment '{importedEnvironment.Name}'", "success");
            }
            catch (Exception ex)
            {
                ShowToast($"Error importing environment: {ex.Message}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error reading file: {ex.Message}", "error");
        }
    }
    
    private async void ShowToast(string message, string type)
    {
        toastMessage = message;
        toastClass = type;
        showToast = true;
        StateHasChanged();
        
        // Auto-hide toast after 5 seconds
        await Task.Delay(5000);
        showToast = false;
        StateHasChanged();
    }

    private void OnResizerMouseDown(MouseEventArgs e)
    {
        // This method doesn't need to do anything in C# code
        // The actual resizing logic is handled by JavaScript in sidebar-resizer.js
    }
}