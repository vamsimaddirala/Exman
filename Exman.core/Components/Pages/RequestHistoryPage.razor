@page "/history"
@using Exman.Models
@using Exman.Services
@inject IRequestHistoryService RequestHistoryService
@inject ICollectionService CollectionService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="postman-container">
    <!-- Left sidebar for actions -->
    <div class="sidebar">
        <div class="collections-container">
            @if (!historyRequests.Any())
            {
                <div class="empty-state">
                    <p>No request history found.</p>
                    <p>Make some API requests to see them here.</p>
                </div>
            }
            else
            {
                <div class="history-actions">
                    <button class="action-button" @onclick="() => showClearConfirmation = true">
                        Clear History
                    </button>
                </div>
                <div class="history-list">
                    @foreach (var request in historyRequests)
                    {
                        <div class="request-item" @onclick="() => LoadRequest(request)">
                            <div class="request-method @request.Method.ToString().ToLower()">@request.Method.ToString()</div>
                            <div class="request-details">
                                <div class="request-name">@(string.IsNullOrEmpty(request.Name) ? request.Url : request.Name)</div>
                                <div class="request-url">@request.Url</div>
                                <div class="request-time">@FormatTimeAgo(request.LastUsed)</div>
                            </div>
                            <div class="history-item-actions">
                                <button class="action-btn" @onclick="() => ShowSaveToCollectionModal(request)" title="Save to Collection">üìÇ</button>
                                <button class="action-btn" @onclick="() => RemoveFromHistory(request)" title="Remove">√ó</button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
    <!-- Sidebar resizer -->
    <div class="sidebar-resizer" @onmousedown="OnResizerMouseDown"></div>
    <!-- Main content area -->
    <div class="main-content">
        <div class="no-response">
            <div class="center-message">
                <i class="icon-no-response"></i>
                <p>Select a request from history to load it</p>
            </div>
        </div>
    </div>
</div>

@if (showClearConfirmation)
{
    <div class="modal-backdrop" @onclick="() => showClearConfirmation = false"></div>
    <div class="modal">
        <div class="modal-header">
            <h3>Clear History</h3>
            <button class="close-button" @onclick="() => showClearConfirmation = false">√ó</button>
        </div>
        <div class="modal-body">
            <p>Are you sure you want to clear all request history?</p>
            <p>This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
            <button class="cancel-button" @onclick="() => showClearConfirmation = false">Cancel</button>
            <button class="danger-button" @onclick="ClearHistory">Clear All History</button>
        </div>
    </div>
}

@if (showSaveToCollectionModal && selectedRequest != null)
{
    <div class="modal-backdrop" @onclick="CloseSaveToCollectionModal"></div>
    <div class="modal">
        <div class="modal-header">
            <h3>Save to Collection</h3>
            <button class="close-button" @onclick="CloseSaveToCollectionModal">√ó</button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label>Request Name</label>
                <input type="text" @bind="requestName" placeholder="Enter a name for this request" />
            </div>
            <div class="form-group">
                <label>Collection</label>
                <select value="selectedCollectionId" @onchange="OnCollectionSelected">
                    <option value="">Select a collection</option>
                    @foreach (var collection in collections)
                    {
                        <option value="@collection.Id">@collection.Name</option>
                    }
                </select>
            </div>
            <div class="collection-tree-container">
                @if (!string.IsNullOrEmpty(selectedCollectionId) && currentCollection != null)
                {
                    <div class="collection-path">
                        <span>Current path: </span>
                        <span class="path-item" @onclick="() => NavigateToRoot()">Root</span>
                        @foreach (var (folder, index) in navigationPath.Select((folder, index) => (folder, index)))
                        {
                            <span> > </span>
                            <span class="path-item" @onclick="() => NavigateToPathIndex(index)">@folder.Name</span>
                        }
                    </div>
                    @if (currentFolders.Any())
                    {
                        <div class="folder-list">
                            @foreach (var folder in currentFolders)
                            {
                                <div class="folder-item" @onclick="() => NavigateToFolder(folder)">
                                    <span class="folder-icon">üìÅ</span>
                                    <span class="folder-name">@folder.Name</span>
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        </div>
        <div class="modal-footer">
            <button class="cancel-button" @onclick="CloseSaveToCollectionModal">Cancel</button>
            <button class="save-button" @onclick="SaveToCollection" 
                    disabled="@(string.IsNullOrEmpty(selectedCollectionId) || collections.Count == 0)">Save</button>
        </div>
    </div>
}

@code {
    private List<ApiRequest> historyRequests = new();
    private List<Exman.Models.Collection> collections = new();
    private bool showClearConfirmation = false;
    private bool showSaveToCollectionModal = false;
    private ApiRequest? selectedRequest;
    private string selectedCollectionId = "";
    private string requestName = "";
    
    // Save modal properties for collection tree navigation
    private Exman.Models.Collection? currentCollection;
    private List<Exman.Models.Collection> currentFolders = new();
    private List<Exman.Models.Collection> navigationPath = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadHistoryAsync();
        await LoadCollectionsAsync();
    }
    
    private async Task LoadHistoryAsync()
    {
        historyRequests = (await RequestHistoryService.GetHistoryAsync()).ToList();
    }
    
    private async Task LoadCollectionsAsync()
    {
        collections = (await CollectionService.GetCollectionsAsync()).ToList();
    }
    
    private async Task RemoveFromHistory(ApiRequest request)
    {
        await RequestHistoryService.RemoveFromHistoryAsync(request.Id);
        await LoadHistoryAsync();
    }
    
    private async Task ClearHistory()
    {
        await RequestHistoryService.ClearHistoryAsync();
        historyRequests = new List<ApiRequest>();
        collections = new List<Exman.Models.Collection>();
        showClearConfirmation = false;
    }
    
    private void LoadRequest(ApiRequest request)
    {
        // Navigate to API test page with this request
        NavigationManager.NavigateTo($"/apitest?requestId={request.Id}");
    }
    
    private string FormatTimeAgo(DateTime date)
    {
        var timeSpan = DateTime.Now - date;
        
        if (timeSpan.TotalMinutes < 1)
            return "just now";
        if (timeSpan.TotalHours < 1)
            return $"{(int)timeSpan.TotalMinutes} min ago";
        if (timeSpan.TotalDays < 1)
            return $"{(int)timeSpan.TotalHours} hours ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} days ago";
        if (timeSpan.TotalDays < 30)
            return $"{(int)timeSpan.TotalDays / 7} weeks ago";
        if (timeSpan.TotalDays < 365)
            return $"{(int)timeSpan.TotalDays / 30} months ago";
        
        return $"{(int)timeSpan.TotalDays / 365} years ago";
    }
    
    private void ShowSaveToCollectionModal(ApiRequest request)
    {
        selectedRequest = request;
        requestName = !string.IsNullOrEmpty(request.Name) ? request.Name : $"{request.Method} {request.Url}";
        showSaveToCollectionModal = true;
    }
    
    private void CloseSaveToCollectionModal()
    {
        showSaveToCollectionModal = false;
        selectedRequest = null;
        selectedCollectionId = "";
        requestName = "";
        currentCollection = null;
        currentFolders = new List<Exman.Models.Collection>();
        navigationPath = new List<Exman.Models.Collection>();
    }
    
    private async Task SaveToCollection()
    {
        if (selectedRequest == null || string.IsNullOrEmpty(selectedCollectionId))
        {
            return;
        }
        
        try
        {
            // Clone the request to avoid modifying the original
            var requestToSave = selectedRequest.Clone();
            requestToSave.Name = requestName;
            
            // Ensure the body type is properly set based on content type
            if (requestToSave.Body != null)
            {
                requestToSave.Body.Type = requestToSave.Body.ContentType switch
                {
                    "none" => RequestBody.BodyType.None,
                    "text/plain" or "application/json" or "application/javascript" or "application/xml" or "text/html" => RequestBody.BodyType.Raw,
                    "multipart/form-data" => RequestBody.BodyType.FormData,
                    "application/x-www-form-urlencoded" => RequestBody.BodyType.UrlEncoded,
                    "application/graphql" => RequestBody.BodyType.GraphQL,
                    "application/octet-stream" => RequestBody.BodyType.Binary,
                    _ => RequestBody.BodyType.Raw // Default to Raw for other content types
                };
            }
            
            await RequestHistoryService.SaveToCollectionAsync(requestToSave, selectedCollectionId);
            CloseSaveToCollectionModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving to collection: {ex.Message}");
            // Could add error message display here
        }
    }
    
    private void OnCollectionSelected(ChangeEventArgs e)
    {
        selectedCollectionId = e.Value?.ToString() ?? "";
        currentCollection = collections.FirstOrDefault(c => c.Id == selectedCollectionId);
        currentFolders = currentCollection?.Folders?.ToList() ?? new List<Exman.Models.Collection>();
        navigationPath = new List<Exman.Models.Collection>();
    }
    
    private void NavigateToRoot()
    {
        navigationPath.Clear();
        currentFolders = currentCollection?.Folders?.ToList() ?? new List<Exman.Models.Collection>();
    }
    
    private void NavigateToPathIndex(int index)
    {
        navigationPath = navigationPath.Take(index + 1).ToList();
        currentFolders = navigationPath.Last().Folders?.ToList() ?? new List<Exman.Models.Collection>();
    }
    
    private void NavigateToFolder(Exman.Models.Collection folder)
    {
        navigationPath.Add(folder);
        currentFolders = folder.Folders?.ToList() ?? new List<Exman.Models.Collection>();
    }
    
    private void OnResizerMouseDown(MouseEventArgs e)
    {
        // This method doesn't need to do anything in C# code
        // The actual resizing logic is handled by JavaScript in sidebar-resizer.js
    }
}